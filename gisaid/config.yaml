#### Which builds to produce via this config? ###
# The GISAID builds are a combination of three parts: subtype (e.g. h5n1),
# time (e.g. all-time) and segment (e.g. ha)
builds:
  - subtype:
      - h5nx
      - h5n1
    segment: &segments
      - pb2
      - pb1
      - pa
      - ha
      - np
      - na
      - mp
      - ns
    time:
      - 2y
      - all-time
  - subtype:
      - h7n9
      - h9n2
    segment: *segments
    time:
      - all-time

# The default target for this build is the Auspice JSON, however config overlays may wish to change this
# (e.g. to target "intermediate" files instead)
target_patterns:
  - "auspice/avian-flu_{subtype}_{segment}_{time}.json"

# Input source(s)
inputs:
  - name: gisaid
    metadata: s3://nextstrain-data-private/files/workflows/avian-flu/metadata.tsv.zst
    sequences: s3://nextstrain-data-private/files/workflows/avian-flu/{segment}/sequences.fasta.zst

# For subtypes defined as build wildcards (e.g. "h5n1", "h5nx"), list out the subtype values
# that we'll use to filter the starting metadata's 'subtype' column
subtype_lookup:
  h5nx: ['h5n1', 'h5n2', 'h5n3', 'h5n4', 'h5n5', 'h5n6', 'h5n7', 'h5n8', 'h5n9']
  h5n1: ['h5n1']
  h7n9: ['h7n9']
  h9n2: ['h9n2']

#### Parameters which control large overarching aspects of the build
same_strains_per_segment: false


#### Config files ####
reference: config/{subtype}/reference_{subtype}_{segment}.gb
auspice_config: config/{subtype}/auspice_config_{subtype}.json
colors: config/{subtype}/colors_{subtype}.tsv
lat_longs: config/{subtype}/lat_longs_{subtype}.tsv
include_strains: config/{subtype}/include_strains_{subtype}_{time}.txt
dropped_strains: config/{subtype}/dropped_strains_{subtype}.txt
clades_file: clade-labeling/{subtype}-clades.tsv
description: config/description_gisaid.md


#### Rule-specific parameters ####
# The formatting here represents the three-tiered nature of the avian-flu build which
# comprises subtype / segment / time-resolution
# You can use '*' as a catch-all for any of these tiers.
# There's one exception: If a config value is constant for any and all builds then you
# can just use a scalar value (number, string, boolean)
filter: 
  target_sequences_per_tree:
    "*/*/*": 3000

  min_length:
    "*/pb2/*": 2100
    "*/pb1/*": 2100
    "*/pa/*": 2000
    "*/ha/*": 1600
    "*/np/*": 1400
    "*/na/*": 1270
    "*/mp/*": 900
    "*/ns/*": 800

  min_date:
    "*/*/2y": 2Y
    "h5nx/*/all-time": 1996
    "h5n1/*/all-time": 1996
    "h7n9/*/all-time": 2013
    "h9n2/*/all-time": 1966 # TODO - go back and check we didn't make a typo from 1996 to 1966

  group_by:
    "*/*/2y": subtype region month host
    "h5nx/*/all-time": subtype country year
    "h5n1/*/all-time": region country year
    "h7n9/*/all-time": division year
    "h9n2/*/all-time": country year

  exclude_where:
    host=laboratoryderived host=ferret host=unknown host=other host=host country=? region=? gisaid_clade=3C.2

refine:
  timetree:
    "*/*/*": true
  coalescent: const
  date_inference: marginal

  clock_filter_iqd: 4

  root: false

  clock_rates:
    # NOTE: an empty value means no supplied clock rate, i.e. infer the clock
    # (This is the fallback value - */*/* - to be used if we don't provide a more specific value below)
    "*/*/*": ''
    # otherwise supply a list of [rate, std_dev]
    "h5nx/pb2/2y": [0.00287, &clock_std_dev 0.00211]
    "h5nx/pb1/2y": [0.00267, *clock_std_dev]
    "h5nx/pa/2y": [0.00238, *clock_std_dev]
    "h5nx/ha/2y": [0.0048, *clock_std_dev]
    "h5nx/np/2y": [0.0022, *clock_std_dev]
    "h5nx/na/2y": [0.0028, *clock_std_dev]
    "h5nx/mp/2y": [0.0017, *clock_std_dev]
    "h5nx/ns/2y": [0.0017, *clock_std_dev]
    "h5n1/pb2/2y": [0.00287, *clock_std_dev]
    "h5n1/pb1/2y": [0.00264, *clock_std_dev]
    "h5n1/pa/2y": [0.00248, *clock_std_dev]
    "h5n1/ha/2y": [0.00455, *clock_std_dev]
    "h5n1/np/2y": [0.00252, *clock_std_dev]
    "h5n1/na/2y": [0.00349, *clock_std_dev]
    "h5n1/mp/2y": [0.00191, *clock_std_dev]
    "h5n1/ns/2y": [0.00249, *clock_std_dev]

ancestral:
  inference: joint
  root_seq: false

traits:
  columns:
    "h5nx/*/*": region
    "h5n1/*/*": region country
    "h7n9/*/*": country division
    "h9n2/*/*": region country
  sampling_bias_correction: false
  confidence: false

export:
  title: false # use the title in the auspice JSON
    # TODO - if we parameterise this here we can use the subtype wildcard to customise the title